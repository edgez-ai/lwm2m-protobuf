// -----------------------------------------------------------------------------
// LwM2M Protobuf Schema (Skeleton)
// -----------------------------------------------------------------------------
// This file defines a starting point for representing Lightweight M2M (LwM2M)
// operations, registration lifecycle, resource addressing, observe/notify, and
// generic request/response messaging over a gRPC or other protobuf-capable
// transport.
//
// Customize: package name, go/java/csharp options, enum values you actually
// intend to support, services (if you will expose gRPC), and the message shapes
// to match your gateway/server/device architecture.
// -----------------------------------------------------------------------------

syntax = "proto3";

package lwm2m; // Change to your org namespace (e.g., edgez.lwm2m)

option optimize_for = SPEED;
// Language-specific (uncomment & adapt)
// option go_package = "github.com/yourorg/yourrepo/lwm2m/pb;lwm2mpb";
option java_multiple_files = true;
option java_package = "com.edgez.lwm2m";
option java_outer_classname = "LwM2MProto";
// option csharp_namespace = "YourOrg.LwM2M";


// (device)appearance broadcasting => (gateway)device discovery => (device) challenge => (device) challenge answer => (server) bootstrap => (device) bootstrap

message LwM2MMessage {
	uint64 timestamp = 1; // Server receive or client sample time
    oneof body {
		LwM2MAppearance appearance = 100;
		// Future message types here
    }
}

// around 40 bytes when serialized
message LwM2MAppearance {
	sint32 model = 1;
	uint32 serial = 2;
}

message LwM2MDevice {
	sint32 model = 1;
	uint32 serial = 2; // also same meaning for node_id in mesh network
	bytes public_key = 3; // client public key
	bytes aes_key = 4; // symmetric key for AES-256-GCM
}

message LwM2MDeviceMap {
	map<uint32, LwM2MDevice> devices = 1;
}

message LwM2MDeviceChallenge {
	uint32 transaction_id = 1; // random transaction id generated by server
	bytes server_public_key = 2; // presigned signature using trusted private key, and encrypted using ECDH + ChaCha20-Poly1305
	bytes encrypted_nounce = 3; // presigned signature using trusted private key, and encrypted using ECDH + ChaCha20-Poly1305
}

message LwM2MDeviceChallengeAnswer {
	uint32 transaction_id = 1;
	bytes answer = 2; // presigned signature using trusted private key, and encrypted using ECDH + ChaCha20-Poly1305
}



enum LwM2MBootstrapResultCode {
	UNSPECIFIED = 0;
	SUCCESS = 1;
	INVALID_SIGNATURE = 2;
	INVALID_MODEL = 3;
	INVALID_SERIAL = 4;
	OTHER_ERROR = 5;
	DELETED = 6;
	BANNED = 7;
}

message LwM2MBootstrapResponse {
	LwM2MBootstrapResultCode code = 1;
	bytes nounce = 2; // random nonce generated by server
	bytes payload = 3; // presigned signature using trusted private key, and encrypted using ECDH + ChaCha20-Poly1305, the payload is serialized LwM2MBootstrapMessage
}

message LwM2MResourceGet {
	sint32 object_id = 1;
	sint32 resource_id = 2;
	sint32 resource_instance_id = 3;
	oneof value {
		bytes bytes_value = 4;
		string string_value = 5;
		sint32 int_value = 6;
		bool bool_value = 7;
		float float_value = 8;
		double double_value = 9;
	}
}

message LwM2MResourceSet {
	sint32 object_id = 1;
	sint32 resource_id = 2;
	sint32 resource_instance_id = 3;
	oneof value {
		bytes bytes_value = 4;
		string string_value = 5;
		sint32 int_value = 6;
		bool bool_value = 7;
		float float_value = 8;
		double double_value = 9;
	}
}

message LwM2MBootstrapMessage {
	bytes admin_public_key = 1; // admin public key
	bytes aes_key = 2; // symmetric key for AES-256-GCM
	uint32 gateway_id = 3; // gateway identifier
	repeated LwM2MResourceSet resources = 4; // resources to set
}

message FactoryPartition {
	sint32 model = 1; // 8 bit model
	sint32 vendor = 2; // 
	sint32 serial = 3;
	sint32 version = 4; // vendor private key version
	bytes public_key = 5; // client public key
	bytes private_key = 6; // client private key
	bytes bootstrap_server = 7; // bootstrap server URL
	bytes signature = 8; // HMAC-SHA256 signature of model|vendor|serial|version|public_key|private_key|bootstrap_server using factory private key
}